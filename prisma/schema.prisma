// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StepType {
  INPUT_TEXT
  INPUT_NUMBER
  INPUT_DATE
  INPUT_TIME
  INPUT_EMAIL
  INPUT_PHONE
  INPUT_URL
  SELECT
}

enum ValidationType {
  API
  REGEX_TEST
  REGEX_REPLACE
  MIN
  MAX
  MIN_LENGTH
  MAX_LENGTH
}

model TemplateParams {
  id          Int       @id @default(autoincrement())
  url_param   String
  wa_param_id Int
  template    Template? @relation(fields: [template_id], references: [id])
  template_id Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Template {
  id                  Int                @id @default(autoincrement())
  name                String
  url                 String // sempre levar dados do user, current step // se o status for 200: espera receber sempre o proximo step, se n√£o, retorna o template de erro definido no Step
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  steps               Step[]
  params              TemplateParams[]
  select_type_options SelectTypeOption[]
}

model SelectTypeOption {
  id             Int        @id @default(autoincrement())
  identifier     String
  value          String
  template       Template   @relation(fields: [template_id], references: [id])
  template_id    Int
  select_type    SelectType @relation(fields: [select_type_id], references: [id])
  select_type_id Int
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model SelectType {
  id                  Int                @id @default(autoincrement())
  step                Step               @relation(fields: [step_id], references: [id])
  step_id             Int
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  select_type_options SelectTypeOption[]
}

model Validation {
  id         Int            @id @default(autoincrement())
  type       ValidationType
  value      String
  step       Step           @relation(fields: [step_id], references: [id])
  step_id    Int
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
}

model Step {
  id             Int          @id @default(autoincrement())
  name           String
  order          Int          @unique // identificador do step
  type           StepType
  template       Template?    @relation(fields: [template_id], references: [id])
  template_id    Int?
  panel_user     PanelUser    @relation(fields: [panel_user_id], references: [id])
  panel_user_id  Int
  error_template String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  validations    Validation[]
  select_types   SelectType[]
  talk_users     TalkUser[]
}

model TalkUser {
  id            Int       @id @default(autoincrement())
  name          String?
  phone         String
  panel_user    PanelUser @relation(fields: [panel_user_id], references: [id])
  panel_user_id Int
  step          Step      @relation(fields: [step_id], references: [id])
  step_id       Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model PanelUser {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String?
  phone      String
  password   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  steps      Step[]
  talk_users TalkUser[]
}
